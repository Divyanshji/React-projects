{"version":3,"sources":["requests.js","axios.js","Row.js","Banner.js","Nav.js","App.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","console","log","className","map","movie","onClick","movieTrailer","name","then","url","split","catch","error","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","Banner","str","max","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a734504.chunk.js","sourcesContent":["const API_KEY = \"db1dacadb7a9a5550ef4c07e1ab34b88\"\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&language=en-US`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`\r\n}\r\n\r\nexport default requests;","import axios from \"axios\"\r\n\r\nconst instance = axios.create ({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n\r\n});\r\n \r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react'\r\nimport YouTube from 'react-youtube';\r\nimport axios from './axios'\r\nimport \"./Row.css\"\r\nimport movieTrailer from 'movie-trailer';\r\n\r\n    const baseurl = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row( { title , fetchUrl, isLargeRow}) {\r\n    const[movies , setMovies] = useState([]);\r\n    const [trailerUrl , setTrailerUrl] = useState(\"\")\r\n\r\n    useEffect(()=>{\r\n        // \r\n        async function fetchData(){\r\n            const request = await axios.get(fetchUrl);\r\n            // console.log(request)\r\n            setMovies(request.data.results);            \r\n            return request;    \r\n        }\r\n        fetchData()         \r\n    },[fetchUrl])\r\n    // console.log(movies)\r\n    const opts = {\r\n        height : \"390\",\r\n        width : \"100%\",\r\n        playerVars: {\r\n            autoplay : 1,\r\n        },\r\n    };\r\n    const handleClick=(movie) => {\r\n        if(trailerUrl){\r\n            setTrailerUrl(\"\");\r\n            console.log(movie);\r\n        }else{\r\n            movieTrailer(movie?.name || movie?.title || \"\")\r\n            .then((url) => {\r\n                // console.log(url)\r\n                // fetchYoutube(url);\r\n                // const urlParam = new URLSearchParams(new URL(url).search);\r\n                // console.log(urlParam);\r\n                \r\n                // setTrailerUrl(urlParam.get(\"v\"))\r\n                setTrailerUrl(url.split(\"=\")[1])\r\n            })\r\n            .catch((error) => console.log(error));\r\n        }\r\n    };\r\n\r\n    console.log(trailerUrl);\r\n    return (\r\n        <div className = \"row\">\r\n            {/* {title} */}\r\n            <h2>{title}</h2>\r\n            {/* {Container= poster} */}\r\n            <div className=\"row_posters\">\r\n                     {movies.map((movie) => (\r\n                        <img \r\n                        key={movie.id}\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n                        src={`${baseurl}${\r\n                            isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                            alt={movie.name}  />\r\n                )\r\n            )}\r\n            </div>\r\n           {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} /> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","import React, { useEffect, useState } from 'react'\r\nimport axios from './axios'\r\nimport requests from './requests' \r\nimport './Banner.css'\r\n\r\nfunction Banner() {\r\n    const [movie, setMovie] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData()\r\n        {\r\n            const request = await axios.get(requests.fetchNetflixOriginals)\r\n            setMovie(request.data.results[\r\n                Math.floor(Math.random() * request.data.results.length - 1)\r\n            ])\r\n        }\r\n       fetchData();\r\n    }, []);\r\n    // console.log(movie)\r\n\r\n    function truncate(str, max) {\r\n        return str?.length > max ? str.substr(0, max-1) + 'â€¦' : str;\r\n      }\r\n\r\n\r\n    return (\r\n        <header className=\"banner\" \r\n        style={{\r\n            backgroundSize:\"cover\",\r\n            backgroundImage:`url(\r\n                \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\r\n            )`,\r\n            backgroundPosition:\"center center\"\r\n        }}\r\n        >\r\n        <div className=\"banner_content\">\r\n            <h1 className=\"banner_title\">{movie?.title || movie?.name || movie?.original_name}</h1>\r\n\r\n            <div className=\"banner_buttons\">\r\n                <button className=\"banner_button\">Play</button>\r\n                <button className=\"banner_button\">My List</button>\r\n            </div>\r\n            <h1 className=\"banner_description\">\r\n                {truncate(movie?.overview,150)}\r\n            </h1>\r\n        </div>\r\n\r\n        <div className=\"banner-fadebottom\"/>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        window.addEventListener(\"scroll\",() => {\r\n            if(window.scrollY > 100) {\r\n                handleShow(true)\r\n            } else handleShow(false);\r\n        });\r\n        return() => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    },[]);\r\n    return (\r\n        <div className={`nav ${show && \"nav_black\"}`}>\r\n            <img className=\"nav-logo\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\" alt=\"NetFlix-Logo\" />\r\n            <img className=\"nav-avatar\"\r\n            src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\" alt=\"Netflix-avatar\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import './App.css';\nimport requests from './requests';\nimport Row from './Row';\nimport Banner from './Banner'\nimport Nav from './Nav'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n  <Nav />\n    <Banner />\n     <Row title = \"NETFLIX ORIGINALS\" fetchUrl = {requests.fetchNetflixOriginals} isLargeRow={true}/>\n     <Row title = \"TRENDING\" fetchUrl={requests.fetchTrending}/>\n     <Row title = \"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}